name: Release and Deploy

on:
  release:
    types: [published]

# Permissions needed for the workflow
permissions:
  contents: write # Required to upload assets to releases
  packages: write # Required for Docker image publishing

# Configuration variables - customize these as needed
env:
  PYTHON_VERSION: "3.11"
  DOCKER_IMAGE_NAME_BACKEND: "plex-watcher-backend"
  DOCKER_IMAGE_NAME_FRONTEND: "plex-watcher-frontend"
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  BACKEND_DIR: "backend"
  FRONTEND_DIR: "frontend"
  BACKEND_VERSION_FILE: "backend/__init__.py"
  # Artifact names for build outputs
  BACKEND_ARTIFACT_NAME: "backend-build.whl"
  FRONTEND_ARTIFACT_NAME: "frontend-build.zip"

jobs:
  # Job 1: Run tests to ensure everything works
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -e "${{ env.BACKEND_DIR }}[test]"

      - name: Run pytest
        run: |
          pytest tests/ -v --tb=short

  # Job 2: Update version and build wheels
  build:
    name: Build Distribution Packages
    needs: test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.get_version.outputs.is_prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Extract version from release tag
        id: get_version
        run: |
          # Get the tag name (e.g., v1.2.3, v1.2.3-beta.1, v1.2.3-rc.2)
          TAG_NAME="${{ github.event.release.tag_name }}"
          echo "Tag name: $TAG_NAME"

          # Remove 'v' prefix if present
          VERSION="${TAG_NAME#v}"
          echo "Parsed version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if this is a pre-release (contains -, alpha, beta, rc, dev)
          if [[ "$VERSION" =~ (alpha|beta|rc|dev|-) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a pre-release version"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release"
          fi

      - name: Update backend version
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" "${{ env.BACKEND_VERSION_FILE }}"
          echo "Updated backend version to $VERSION"
          cat "${{ env.BACKEND_VERSION_FILE }}" | head -n 3

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel build

      - name: Build backend wheel
        run: |
          cd "${{ env.BACKEND_DIR }}"
          python -m build --wheel
          echo "Backend wheel built successfully"
          ls -lh dist/

      - name: Rename backend wheel
        run: |
          cd "${{ env.BACKEND_DIR }}/dist"
          WHEEL_FILE=$(ls *.whl)
          mv "$WHEEL_FILE" "${{ env.BACKEND_ARTIFACT_NAME }}"
          echo "Renamed $WHEEL_FILE to ${{ env.BACKEND_ARTIFACT_NAME }}"
          ls -lh

      - name: Upload backend wheel as artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-wheel
          path: ${{ env.BACKEND_DIR }}/dist/${{ env.BACKEND_ARTIFACT_NAME }}
          retention-days: 7

      # Build SvelteKit frontend (Node adapter)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Update frontend version in package.json
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          npm version $VERSION --no-git-tag-version --allow-same-version
          echo "Updated frontend version to $VERSION"
          cat package.json | grep '"version"'

      - name: Install frontend dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Build SvelteKit frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

      - name: Archive frontend build
        run: |
          cd ${{ env.FRONTEND_DIR }}
          zip -r ../${{ env.FRONTEND_ARTIFACT_NAME }} build/

      - name: Upload frontend build as artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_ARTIFACT_NAME }}
          retention-days: 7

  # Job 3: Upload wheels to GitHub Release
  upload-release-assets:
    name: Upload Assets to Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download backend wheel
        uses: actions/download-artifact@v4
        with:
          name: backend-wheel
          path: ./wheels/backend

      - name: Upload backend wheel to release
        uses: softprops/action-gh-release@v1
        with:
          files: ./wheels/backend/${{ env.BACKEND_ARTIFACT_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./frontend-release

      - name: Upload frontend build to release
        uses: softprops/action-gh-release@v1
        with:
          files: ./frontend-release/${{ env.FRONTEND_ARTIFACT_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 4: Build and push Docker images (parallel builds for each platform)
  docker-build:
    name: Build Docker Image (${{ matrix.platform }})
    needs: [build, upload-release-assets]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update backend version in source
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" "${{ env.BACKEND_VERSION_FILE }}"

      - name: Generate platform-specific cache key
        id: cache_key
        run: |
          PLATFORM_KEY=$(echo "${{ matrix.platform }}" | sed 's/\//-/g')
          echo "platform_key=$PLATFORM_KEY" >> $GITHUB_OUTPUT

      - name: Build and tag Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }}
          tags: |
            # Tag with full version number (always)
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            # Tag with major.minor (stable releases only)
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }},enable=${{ needs.build.outputs.is_prerelease == 'false' }}
            # Tag with major (stable releases only)
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }},enable=${{ needs.build.outputs.is_prerelease == 'false' }}
            # Tag as latest only if not pre-release
            type=raw,value=latest,enable=${{ needs.build.outputs.is_prerelease == 'false' }}
            # Tag as beta/rc/alpha if pre-release
            type=raw,value=beta,enable=${{ contains(steps.version.outputs.version, 'beta') }}
            type=raw,value=rc,enable=${{ contains(steps.version.outputs.version, 'rc') }}
            type=raw,value=alpha,enable=${{ contains(steps.version.outputs.version, 'alpha') }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./${{ env.BACKEND_DIR }}
          file: ./${{ env.BACKEND_DIR }}/dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          # Platform-specific caching for better performance
          cache-from: |
            type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:buildcache-${{ steps.cache_key.outputs.platform_key }}
            type=gha,scope=${{ steps.cache_key.outputs.platform_key }}
          cache-to: |
            type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:buildcache-${{ steps.cache_key.outputs.platform_key }},mode=max
            type=gha,mode=max,scope=${{ steps.cache_key.outputs.platform_key }}
          provenance: false
          outputs: type=image,name=${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            VERSION=${{ steps.version.outputs.version }}
            BUILDKIT_INLINE_CACHE=1

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.cache_key.outputs.platform_key }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Job 5: Merge platform-specific images into multi-platform manifest
  docker-merge:
    name: Create Multi-Platform Docker Manifest
    needs: [build, docker-build]
    runs-on: ubuntu-latest

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and tag Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }}
          tags: |
            # Tag with full version number (always)
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            # Tag with major.minor (stable releases only)
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }},enable=${{ needs.build.outputs.is_prerelease == 'false' }}
            # Tag with major (stable releases only)
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }},enable=${{ needs.build.outputs.is_prerelease == 'false' }}
            # Tag as latest only if not pre-release
            type=raw,value=latest,enable=${{ needs.build.outputs.is_prerelease == 'false' }}
            # Tag as beta/rc/alpha if pre-release
            type=raw,value=beta,enable=${{ contains(steps.version.outputs.version, 'beta') }}
            type=raw,value=rc,enable=${{ contains(steps.version.outputs.version, 'rc') }}
            type=raw,value=alpha,enable=${{ contains(steps.version.outputs.version, 'alpha') }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ steps.version.outputs.version }}

      - name: Docker image summary
        run: |
          echo "### Docker Image Published Successfully! 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME_BACKEND }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
