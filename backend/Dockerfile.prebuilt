# ===================
# Optimized Dockerfile for CI/CD - Uses pre-built binaries
# ===================
# This Dockerfile is significantly faster than the standard Dockerfile
# because it skips the Go build stage and uses pre-compiled binaries
# from the GitHub Actions workflow.
#
# IMPORTANT: Final image size is IDENTICAL to standard Dockerfile (~15-20MB)
# Both produce the same minimal Alpine-based image with a statically-linked binary.
# The only difference is WHERE the binary is compiled (outside vs inside Docker).
#
# Used by: .github/workflows/release.yml
# For local development: Use standard Dockerfile instead
# ===================

FROM alpine:latest

# Install necessary certificates
RUN apk --no-cache add ca-certificates

# Create the non-root user
RUN adduser -D appuser

WORKDIR /app

# Platform-specific binary will be copied in during build
# ARG set by docker buildx automatically: TARGETARCH (amd64/arm64)
ARG TARGETARCH

# Copy the pre-built binary from the build context
# Expected filename: server-linux-${TARGETARCH}
COPY dist/server-linux-${TARGETARCH} /app/app

# Make binary executable and set ownership
RUN chmod +x /app/app && chown appuser:appuser /app/app

# Switch to the non-root user for security
USER appuser

# Expose the application port
EXPOSE 8080

# Run the application
CMD ["/app/app"]
